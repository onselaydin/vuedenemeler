https://vuejs.org/
https://codepen.io/oncell/
npm install -g vue-cli
yeni proje için
#vue init simple projeadi
#vue init webpack projeadi
#vue init webpack-simple projeadi
C:\testvue>vue init webpack-simple .
C:\testvue>npm install
C:\testvue> npm run dev
.babelrc = ecmascript 6 yı 5 e çeviren konfügrasyon dosyasıdır.
single file bir template 3 elemente sahip olmalıdır. 
<template></template> <script></script> ve <style></style>

--Canlıya alma Build işlemi--
# npm run build
dist klasörü oluşuyor. index.html için <script src="/dist/build.js"></script> getiriyor. 
index'i ve dist içini al sunucuya koy çalıştır.

--yararlı linkler--
https://vuejs.org/v2/guide/single-file-components.html
render fonksiyonu detayları https://vuejs.org/v2/guide/render-function.html
vue developer tool
https://github.com/vuejs/vue-devtools
kendo ui https://www.telerik.com/kendo-vue-ui/components/grid/

https://jsfiddle.net/gkandemir/e1hjuL2v/20/
https://vuejs.org/v2/guide/components.html
https://vuejs.org/v2/guide/components-registration.html

https://vuejs.org/v2/guide/components.html#Passing-Data-to-Child-Components-with-Props
https://vuejs.org/v2/guide/components.html#Listening-to-Child-Components-Events
https://vuejs.org/v2/guide/state-management.html

https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots
https://vuejs.org/v2/guide/components.html#Dynamic-Components
https://vuejs.org/v2/guide/components-edge-cases.html

https://vuejs.org/v2/guide/forms.html

https://github.com/pagekit/vue-resource/blob/develop/docs/resource.md
https://firebase.google.com/docs/reference/rest/database/

https://vuejs.org/v2/api/


Yeni açılan bir komponeti main.js içine tanımla
örneğin
import Home from "./Home"

Vue.component("lamb-component",Home) 

Not: p h vs etiketileri template içinde div içine almalıyız.

--iç içe komponent tanımlama--
<template>
<div>
    <lamp-status v-for="Lamp in 5" :key="Lamp"></lamp-status>
</div>
    
</template>

<script>
import LampStatus from "./LampStatus";

export default {
    components : {
        "lamp-status" : LampStatus
    }
}
</script>
----------------------------------
style tanımlarken <style scope></style> eklersen bir birini ezmezler.
scope komponent bazlı etkin hale getiriyor

--Componentler Arası İletişim-- componentimize attribute tanımlama -- parentten chilede veri gönderme--
v-bind kısa yolu : dedir.
attribute tanımlamak ve dışardan komponenti iletişime açmak için props kullanıyoruz
örneğin:
export default {
    props : ["name"]
}
Not: propsu method içinde de kullanabiliriz.
örneğin:
methods : {
    swtichName(){
        return this.name.split("").reverse().join("");
    }
}
--props validation--
props : {
    name : {
        type : String,
        default : "onsel.dev"
    }
}

-- Chiledden Parente veri göndermek--
method içinde $emit ile yayma işlemi yapacağız.
sendToParent(){
    this.$emit("data","Onsel AYDIN");
}
Aslında emit ile bir @click gibi bir event yaptık.

--child dan childa veri göndermek--
Bu mümkün değil. Fakat bir yol var. Buda parent kullanarak yapılır.

--event bus-- veri iletişi yolurud --
main.js de export const eventBus = new Vue(); tanımlıyoruz.
kullanacağımız componente import edeceğiz. script tagına
import eventBus from "../main";

chiledlar içinde eventbusları alacağımız,dinlebileceğimiz created oluşturacağız 
created(){
    eventBus.$on ile alım yapıyorum
}


--Proje oluşturmak--
Klasör aç içine gir
>vue init webpack-simple ./   //burada nokta slash bulunduğu klasöre projeyi aç anlamındadır
>npm install //package.json daki bağımlılıkları yükler

--bootstarp--
bootstarp kurmak için siteden cdn linkini al ve index head tagına yapıştır.

--component içine content göndermek( slot kullanımı)--
h1,p,div vs göndermek...
örnek contentimizin içine slot tagı ekliyoruz ve tagı kullandığımız
yerde h1,p vs tagları eklersin.
<template>
    <div>
        <slot></slot>
    </div>
</template>
Not: birden fazla slot kullanabiliyoruz.
<h1 slot="heading">10 Kasım</h1>
<p slot="content">Atatürkü anıyoruz...</p>
Not: slot içine değer gelmezse default taglar ekleyebiliriz.
<slot name="writer>
    <h1>author</h1>
    <p>hiç bir içerik gelmedi. Burası aktif</p>
</slot>

Alt + aşağı yukarı tuşlarla kursörün bulunduğu satırı taşıyabiliriz.
Ctrl + K + C ile seçili satırları commentler.

--Dinamik komponentler--
sanki menulerde kullanılabilir :)
bunun için vue nün tanıdığı <component></component> tagı ile yapılır.
butonla yada başka yöntemle component çağırma
Bir componentten diğerine geçerken yeniden renderlanır diğer ölür.
componentin destroy edilip tekrar renden edilmesini istemiyorsak
<keep-alive></keep-alive>  takıgı kullanılır.


--lifecycle event hook--
component geçişerinin durumunu öğrenmek için aşağıdaki eventleri kullanırız.

created(){
    console.log("created");
}
destroyed(){
    console.log("destroyed");
},
activated(){
    console.log("Deactivated");
},
deactivated(){
    console.log("deactivated");
}

--v-if kullanımı--
<div v-if="productList.length > 0"> </div>

--input dan veri almak için--
v-model tanımlarız ve {{ username }} ile çağırabiliriz.
<input type="text" id="username" class="form-control" v-model="username">

--Input Modifier--
input text e bir değer girip başka kontole geçince bind olması için <input type="text" v-model.lazy="userData.Password">
lazy kullanırız.
inputa number kontrolü yaptırmak için v-model.lazy.number dememiz yetitiyor. lazy kullanmazsak two-way binding oluyor.
Performans konusunda sıkıntılar olabilir.
Baştaki Sondaki boşlukları temizlemek için v-model.trim yada v-model.lazy.trim
örnek.
<input type="text" @keyup.enter>

--checkbox dan veri almak--
önce data içinde bir array değişken oluştur.
örneğin ilgi alanları grubunda kaç tane checkbox varsa model isimleri aynı olsun. 

--radio button--
v-model değişkeni data içinde oluştur. Bu sefer array olmayacak.
örneğin cinsiyet grubu radio kontrollerin v-model isimleri aynı olacak.

--selected kontrolü--
örnek illeri listelemek data da array oluştur içine illeri yaz(cities).ikinci bir normal değişken oluştur(city)
<select class="form-control">
<option v-model="userData.selectedCity" :selected="city == 'Artvin'"
    v-for="city in userData.cities" v-bind:key="city">{{ city }}</option>
</select>

-- Kendi form kontrolümüzü yapmak --
CustomMyControl.vue kontol et. $emit ve props ile kendi kontrolümüzü yaptık.
https://github.com/onselaydin/vuedenemeler/tree/master/src/formlar

Not: Bir <form> tagı içinde bir button varsa gönderme işlemi yapmaya çalışır.
Aşağıdaki gibi prevent ile bu engellenebilir. prevent de bir Modifier dir.
Buttona tıklandığında form yenilenmeyecek.

<button 
    @click.prevent="submit"
    class="btn btn-primary">Gönder!
</button>

--directives--
v-if, v-for vsvs.
<p v-text="'Bu bir directive örneğidir.'"></p>
<p v-html="'<strong>Bu bir html directividir</strong></p>
--Custom Directive--
main.js e eklediğimiz kendi directiveimiz global oluyor.
Vue.directive("color",{
    bind(el,binding,vnode){
        el.style.backgroundColor = binding.value,
    }
});
kullanmak için <p v-color="'green'">özel directive yaptık uyguladık.</p>
binding ile dışardan veri alabiliris.



--filters--
Gelen verinin transform edilmesi...
Not: Global bişey tanımlamak için main.js dosyasında tanımla.
datanın altına ekle. {{ degisken | toUpperCase() }}
filters : {
    toUpperCase(value){
        return value.toUpperCase();
    }
}
data(){
    return{
        products:["Monitör","Klavye","Masa","Fare","Kitap","Şişe","HardDisk"],
        searchText:''
    }
}
computed: {
    filtered(){
        return this.products.filter((element)=>{
            return element.match(this.searchText);
        })
    }
}

<li v-for="product in filtered"> {{product}}</li>

--mixins ve Scope--
Kod tekrarını engellemek için yapılır. Ayrı bir js oluştur sadece export default kodlarını ekle + kullanacağın yerde import et.
Her yerden import ile çağır kullan.
mixins : [ buraya import ettiğin js i ekle ]

https://www.w3schools.com/js/js_string_methods.asp

--Http Sunucuya Bağlanma--
Dış dünya ile bağlantıya geçmek için vue.resource kullanılır
https://github.com/pagekit/vue-resource
>npm install vue-resource

main.js e import VueResource from "vue-resource";
Vue.use(VueResource);
componentine git

https://firebase.google.com/
Proje ekle + ya tıkla. Projeye bir isim ver(vuejs-vue-resource) Devam. Proje oluştuktan sonra Database tıkla.
Testmodunda yapacağız. Authentication  test de olmuyor. Etkinleştire tıklıyoruz.


örnek:
methods içine fonksiyon yarat
getUsers() {
    this.$http.get("http://localhost/blabla")
    .then((response) => {
        let data = response.data;
        for(let in data){
            console.log(data);
        })
    }
}
Not: url yi Global olarak tanımlamak için main.js e gel.
Vue.http.options.root = "http://localhost/blabla"
sayfada ise this.$http.get("") çift tırnak arasına birşey yazmaya gerek yok.
parametresi var ise "/" slash yazıp parametre girilebiliyor.

saveUser() {
    this.$http.post("http://localhost/blabla", {userName: this.userName})
    .then((response) => {
        console.log(response);
    })
}

--Http Intercept işlemi--
req veya res ler isteklerimizde araya girip bu isteklerde değişiklik yapmak.
örnek request için:
Vue.http.interceptors.push((request,next) => {
    if(request.method == "POST"){
        request.method == "PUT"
    }
    next();
})
örnek response için:
Vue.http.interceptors.push((request,next) => {
    next(response => {
        console.log(response);
        response.json = () => {
            return {
                userList : response.body
            }
        }
    });
})
--http resource--
post get belirmeye gerek yok.
this.$resource("main.js den link geliyor").save({},{ userName : this.userName });
Burada save methodunu gönderdiğinde post yapıyor,update deseydim put çalışacaktı.
remove için delete isteği gönderiliyor.



https://hub.docker.com/_/redis
https://firatesmer.com/nosql-ve-redis/
https://markheath.net/post/exploring-redis-with-docker

docker conatiner run -d -p 6379:6379 --name agroredis redis
docker container run --name agroredis -d - p 6379:6379 redis redis-server --appendonly yes
docker ps
docker logs agroredis
docker exec -it agroredis sh
redis-cli
127.0.0.1:6379> ping  //pong cevabı gelmeli
127.0.0.1:6379> set name mark
OK
127.0.0.1:6379> get name
"mark"
127.0.0.1:6379> incr counter
(integer) 1
127.0.0.1:6379> incr counter
(integer) 2
127.0.0.1:6379> get counter
"2"
--docker redis linked container--
docker run -it --rm --link redis1:redis --name client1 redis sh

--VUE ROUTING--
npm install --save vue-router
main.js e tanımla
import VueRouter from 'vue-router'
Vue.use(VueRouter);
src içine routes.js dosyası oluştur.
import Profile from "./pages/Profile";
import Imports from "./pages/Imports";

export const routers = [
    { path : '/profile', component : Profile },
    { path : '/imports', component : Profile },
]
main js de import { routes } from './routers'
const router = new VueRouter({
  routes
});

vue itin webpack proje adı şeklinde proje oluşturusak. Routerlar otomatik tanımlı geliyor.
{ path: '/home', name: 'Home', component: Home },
// { path: '/home/:id', name: 'Home', component: Home },
sayfada id yi almak için
<p> gelen id: {{ id }}</p>
data() {
    return {
        id : $this.route.params.id
    }
}

-----------------

https://vuejs.org/v2/examples/grid-component.html

-------------
--State yönetimi Vuex--
